<?xml version="1.0" encoding="UTF-8"?>
<question id="1" level="2" subject="guloso">
	<text>
		<p>
			Um algoritmo guloso é uma técnica de resolução de problemas de otimização. 
			Segue abaixo um exemplo de algoritmo que soluciona o problema do <a href="http://www.ime.usp.br/~pf/analise_de_algoritmos/aulas/mochila-frac.html">
			machila fracionário</a>. Qual opção abaixo é correta?
		</p>
<pre><code>Mochila-Fracionária (p, v, n, c)
1  j ← n
2  enquanto  j ≥ 1  e  pj ≤ c  faça
3     xj ← 1
4     c ← c − pj
5     j ← j − 1
6  se  j ≥ 1  então
7     xj ← c/pj
8     para  i ← j−1  decrescendo até  1  faça
9        xi ← 0
10 devolva  x
</code></pre>
	</text>
	<explanation>
		<i>
			<ul>
				<li>- n é o número de objetos</li>
				<li>- cada objeto i tem peso pi e valor vi</li>
				<li>- c é a capacidade da mochila e deve ser respeitada</li>
			</ul>
		</i>
	</explanation>
	<choice type="incorrect">
		<text>O algoritmo tem complexidade $O(n^2)$</text>
		<explanation>
			O algoritmo tem complexidade $O(n)$, o que é comum nos algoritmos gulosos.
		</explanation>
	</choice>
	<choice type="incorrect">
		<text>O algoritmo, além da técnica gulosa, utiliza <a href="https://pt.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms">dividir para conquistar</a></text>
		<explanation>
			O método da divisão e conquista divide o problema em outros menores e os combina, utilizando geralmente recursão, 
			não ocorre divisão do problema em menores.
		</explanation>
	</choice>
	<choice type="incorrect">
		<text>O algoritmo da <a href="http://www.ime.usp.br/~pf/analise_de_algoritmos/aulas/mochila-bool.html">mochila inteiro ou booleano</a>
			  pode ser resolvido pela mesmo algoritmo acima.
		</text>
		<explanation>
			A técnica gulosa não é eficiente para esse problema que pertenece inclusive à <a href="http://www.ime.usp.br/~pf/analise_de_algoritmos/aulas/NPcompleto.html">classe NP</a>.
		</explanation>
	</choice>
	<choice type="incorrect">
		<text>No melhor caso, o algoritmo realiza um número constante de operações</text>
		<explanation>
			No melhor caso, o número de operações realizadas é linear em relação ao tamanho da entrada.
		</explanation>
	</choice>
	<choice type="correct">
		<text>
			A complexidade do algoritmo acima descrito é $O(n)$ dado que os objetos se econtram em ordem crescente de valor específico.
		</text>
		<explanation>
			A complexidade de fato é $O(n)$.
		</explanation>
	</choice>
</question>